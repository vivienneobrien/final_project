# -*- coding: utf-8 -*-
"""NeuralNetwork.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cfcNhNSi9p_Y0WKF6BudAWUTyy3LX7ON
"""

import numpy as np

#randomly initializeing weights and biases in the network e.g. 6 weights and 3 biases. One for each node in the hidden layer as well as for each node in the output layer.
weights = np.around(np.random.uniform(size=6), decimals=2)
biases = np.around(np.random.uniform(size=3), decimals=2)

# printing weight and biases
print(weights)
print(biases)

# computing the output of x1 and x2
x_1= 0.5 #input 1
x_2= 0.85 #input 2
print('x1 is {} and x2 is {}'.format(x_1,x_2))

# # first node of the hidden layer
z_11 = x_1 * weights[0] + x_2 * weights[1] + biases[0]
print('The weighted sum of the inputs at the first node in the hidden layer is {}'.format(z_11))

# second node of the hidden layer
z_12 = x_1 * weights[2] + x_2 * weights[3] + biases[1]
print('The weighted sum of the inputs at the second node in the hidden layer is {}'.format(np.around(z_12, decimals=4)))

# assuming a sigmoid activation function. we compute the activation of the first node in the hidden layer
a_11 = 1.0 / (1.0 + np.exp(-z_11))
print('The activation of the first node in the hidden layer is {}'.format(np.around(a_11, decimals=4)))

# we compute the activation of the second node in the hidden layer
a_12 = 1.0/ (1.0 + np.exp(-z_12))
print('The activation of the second node in the hidden layer is {}'.format(np.around(a_12, decimals=4)))

# these activations will serve as inputs to the output layer. so we compute the weighted sum of these inputs
z_2 = a_11 * weights[4] + a_12 * weights[5] + biases[2]
print('The weighted sum of the inputs at the node in the output layer is {}'.format(np.around(z_2, decimals=4)))

# output of the network as the activation of the node in the outer layer. this is the prediction made by the network
a_2 = 1.0 / (1.0 + np.exp(-z_2))
print('The output of the network for x1 = 0.5 and x2 = 0.85 is {}'.format(np.around(a_2, decimals=4)))